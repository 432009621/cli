// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeSetHealthCheckActor struct {
	SetApplicationProcessHealthCheckTypeByNameAndSpaceStub        func(appName string, spaceGUID string, healthCheckType string, httpEndpoint string, processType string, invocationTimeout int) (v3action.Application, v3action.Warnings, error)
	setApplicationProcessHealthCheckTypeByNameAndSpaceMutex       sync.RWMutex
	setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall []struct {
		appName           string
		spaceGUID         string
		healthCheckType   string
		httpEndpoint      string
		processType       string
		invocationTimeout int
	}
	setApplicationProcessHealthCheckTypeByNameAndSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	setApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetHealthCheckActor) SetApplicationProcessHealthCheckTypeByNameAndSpace(appName string, spaceGUID string, healthCheckType string, httpEndpoint string, processType string, invocationTimeout int) (v3action.Application, v3action.Warnings, error) {
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall[len(fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall)]
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall = append(fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall, struct {
		appName           string
		spaceGUID         string
		healthCheckType   string
		httpEndpoint      string
		processType       string
		invocationTimeout int
	}{appName, spaceGUID, healthCheckType, httpEndpoint, processType, invocationTimeout})
	fake.recordInvocation("SetApplicationProcessHealthCheckTypeByNameAndSpace", []interface{}{appName, spaceGUID, healthCheckType, httpEndpoint, processType, invocationTimeout})
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.Unlock()
	if fake.SetApplicationProcessHealthCheckTypeByNameAndSpaceStub != nil {
		return fake.SetApplicationProcessHealthCheckTypeByNameAndSpaceStub(appName, spaceGUID, healthCheckType, httpEndpoint, processType, invocationTimeout)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturns.result1, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturns.result2, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturns.result3
}

func (fake *FakeSetHealthCheckActor) SetApplicationProcessHealthCheckTypeByNameAndSpaceCallCount() int {
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RLock()
	defer fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RUnlock()
	return len(fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall)
}

func (fake *FakeSetHealthCheckActor) SetApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall(i int) (string, string, string, string, string, int) {
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RLock()
	defer fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RUnlock()
	return fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].appName, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].spaceGUID, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].healthCheckType, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].httpEndpoint, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].processType, fake.setApplicationProcessHealthCheckTypeByNameAndSpaceArgsForCall[i].invocationTimeout
}

func (fake *FakeSetHealthCheckActor) SetApplicationProcessHealthCheckTypeByNameAndSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.SetApplicationProcessHealthCheckTypeByNameAndSpaceStub = nil
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSetHealthCheckActor) SetApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.SetApplicationProcessHealthCheckTypeByNameAndSpaceStub = nil
	if fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall == nil {
		fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSetHealthCheckActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RLock()
	defer fake.setApplicationProcessHealthCheckTypeByNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSetHealthCheckActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.SetHealthCheckActor = new(FakeSetHealthCheckActor)
