// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	sync "sync"

	v7action "code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeAppActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct {
	}
	cloudControllerAPIVersionReturns struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetApplicationByNameAndSpaceStub        func(string, string) (v7action.Application, v7action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}
	GetApplicationSummaryByNameAndSpaceWithRouterStub        func(string, string, bool, v7action.RouteActor) (v7action.ApplicationSummary, v7action.Warnings, error)
	getApplicationSummaryByNameAndSpaceWithRouterMutex       sync.RWMutex
	getApplicationSummaryByNameAndSpaceWithRouterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 v7action.RouteActor
	}
	getApplicationSummaryByNameAndSpaceWithRouterReturns struct {
		result1 v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}
	getApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall map[int]struct {
		result1 v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloudControllerAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeAppActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeAppActor) CloudControllerAPIVersionCalls(stub func() string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = stub
}

func (fake *FakeAppActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.cloudControllerAPIVersionMutex.Lock()
	defer fake.cloudControllerAPIVersionMutex.Unlock()
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppActor) GetApplicationByNameAndSpace(arg1 string, arg2 string) (v7action.Application, v7action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{arg1, arg2})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationByNameAndSpaceStub != nil {
		return fake.GetApplicationByNameAndSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAppActor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeAppActor) GetApplicationByNameAndSpaceCalls(stub func(string, string) (v7action.Application, v7action.Warnings, error)) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = stub
}

func (fake *FakeAppActor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppActor) GetApplicationByNameAndSpaceReturns(result1 v7action.Application, result2 v7action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppActor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v7action.Application, result2 v7action.Warnings, result3 error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	defer fake.getApplicationByNameAndSpaceMutex.Unlock()
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v7action.Application
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v7action.Application
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouter(arg1 string, arg2 string, arg3 bool, arg4 v7action.RouteActor) (v7action.ApplicationSummary, v7action.Warnings, error) {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Lock()
	ret, specificReturn := fake.getApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall[len(fake.getApplicationSummaryByNameAndSpaceWithRouterArgsForCall)]
	fake.getApplicationSummaryByNameAndSpaceWithRouterArgsForCall = append(fake.getApplicationSummaryByNameAndSpaceWithRouterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 v7action.RouteActor
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetApplicationSummaryByNameAndSpaceWithRouter", []interface{}{arg1, arg2, arg3, arg4})
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Unlock()
	if fake.GetApplicationSummaryByNameAndSpaceWithRouterStub != nil {
		return fake.GetApplicationSummaryByNameAndSpaceWithRouterStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getApplicationSummaryByNameAndSpaceWithRouterReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouterCallCount() int {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RUnlock()
	return len(fake.getApplicationSummaryByNameAndSpaceWithRouterArgsForCall)
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouterCalls(stub func(string, string, bool, v7action.RouteActor) (v7action.ApplicationSummary, v7action.Warnings, error)) {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceWithRouterStub = stub
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouterArgsForCall(i int) (string, string, bool, v7action.RouteActor) {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RUnlock()
	argsForCall := fake.getApplicationSummaryByNameAndSpaceWithRouterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouterReturns(result1 v7action.ApplicationSummary, result2 v7action.Warnings, result3 error) {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceWithRouterStub = nil
	fake.getApplicationSummaryByNameAndSpaceWithRouterReturns = struct {
		result1 v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppActor) GetApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall(i int, result1 v7action.ApplicationSummary, result2 v7action.Warnings, result3 error) {
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Lock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.Unlock()
	fake.GetApplicationSummaryByNameAndSpaceWithRouterStub = nil
	if fake.getApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall == nil {
		fake.getApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall = make(map[int]struct {
			result1 v7action.ApplicationSummary
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getApplicationSummaryByNameAndSpaceWithRouterReturnsOnCall[i] = struct {
		result1 v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RLock()
	defer fake.getApplicationSummaryByNameAndSpaceWithRouterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.AppActor = new(FakeAppActor)
